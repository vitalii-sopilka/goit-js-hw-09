{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAQC,SAASC,cAAc,kBAC/BC,EAAOF,SAASC,cAAc,iBAC9BE,EAASH,SAASC,cAAc,mBAqCtC,SAASG,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUS,MAAAR,IAGpBG,EAAO,CAAEJ,WAAUS,MAAAR,G,GAEpBA,E,IA9CWN,SAASC,cAAc,UAE/Bc,iBAAiB,SAE3B,SAA6BC,GAC3BA,EAAEC,iBAOF,SAAoBC,EAAOC,EAAMC,GAC/B,IAAK,IAAIC,EAAW,EAAGA,GAAYD,EAAQC,GAAY,EACvDjB,EAAciB,EAAUH,GACrBI,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALT,MACjBW,EAAA5B,GAAS6B,OAAOC,QACd,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,MAC5C,CACAK,QAAS,K,IAIdC,OAAM,SAAAP,G,IAAGlB,EAAQkB,EAARlB,SAAUmB,EAAKD,EAALT,MAClBW,EAAA5B,GAAS6B,OAAOK,QACd,sBAAqCH,OAAfvB,EAAS,QAAYuB,OAANJ,EAAM,MAC3C,CACEK,QAAS,K,IAIfX,GAASC,C,CAzBba,CACEC,OAAOlC,EAAMmC,OACbD,OAAO/B,EAAKgC,OACZD,OAAO9B,EAAO+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\nconst btnSubmit = document.querySelector('button');\n\nbtnSubmit.addEventListener('click', startCreatePromises);\n\nfunction startCreatePromises(e) {\n  e.preventDefault();\n  getNumbers(\n    Number(delay.value),\n    Number(step.value),\n    Number(amount.value)\n  );\n  \n  function getNumbers(delay, step, amount) {\n    for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`,\n          {\n            timeout: 2000,\n          },\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`,\n          {\n            timeout: 2000,\n          },\n        );\n      })\n      delay += step;\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => { \n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      }\n      else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n}"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$delay","document","querySelector","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay2","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","addEventListener","e","preventDefault","delay1","step1","amount1","position1","then","param","_$delay","$parcel$interopDefault","Notify","success","concat","timeout","catch","failure","getNumbers","Number","value"],"version":3,"file":"03-promises.660d2b1b.js.map"}